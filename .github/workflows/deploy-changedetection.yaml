name: "[DEPLOY] change detection"

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
#  build:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#
#      - name: Install GitVersion
#        uses: gittools/actions/gitversion/setup@v0
#        with:
#          versionSpec: '5.x'
#          preferLatestVersion: true
#    outputs:
#      dockerTag: ${{ steps.gitversion.outputs.fullSemVer  }}

  deploy-check:
#    needs: [ build ]
    name: deployment check
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
    outputs:
      deploy-api: ${{ steps.check.outputs.deploy_api }}
      deploy-web: ${{ steps.check.outputs.deploy_web }}
    steps:
      - run: |
          dotnet tool install dotnet-affected -g

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: check
        name: "change detection for deploy"
        run: |
          echo "# Deploy change detection" >> "$GITHUB_STEP_SUMMARY"
          REF_HEAD=HEAD
          case ${{github.event_name}} in
            push | workflow_dispatch)
            REF_BASE=$(gh run list -R ${{ github.repository }} -b ${{ github.ref_name }} -s success --json headSha --jq ".[0].headSha" -L 1 | head -n 1)  
            if [ $? -ne 0 ]; then
              echo "Error: github api call failed" >> "$GITHUB_STEP_SUMMARY"
              exit 1
            fi
            if [[ -z $REF_BASE ]]; then
              echo "Warning: no base reference found, falling back to HEAD~1"
              echo "Warning: no base reference found" >> "$GITHUB_STEP_SUMMARY"
              REF_BASE=HEAD~1
            fi
            ;;
          
            pull_request)
            echo "PR handling not implemented yet"
            echo "base and head reference for PR is available within github.event" 
            echo "Error: PR handling not implemented yet" >> "$GITHUB_STEP_SUMMARY"
            exit 1
            ;;
          
            *)
            echo "ERROR: unsupported github event_name: ${{github.event_name}}"
            echo "ERROR: unsupported github event_name: ${{github.event_name}}" >> "$GITHUB_STEP_SUMMARY"
            exit 1
            ;;
          esac
          
          if [[ -z $REF_BASE ]]; then
            echo "ERROR: github base reference not found"
            echo "ERROR: github base reference not found" >> "$GITHUB_STEP_SUMMARY"
            exit 1
          fi
          echo "BASE: $REF_BASE"
          bash scripts/deploy-changedetection.sh -r $REF_BASE -d
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  deploy-staging:
    needs: [ deploy-check ]
    if: needs.deploy-check.outputs.deploy-api == 1 || needs.deploy-check.outputs.deploy-web == 1
    outputs:
      deploy-api: ${{ needs.deploy-check.outputs.deploy-api }}
      deploy-web: ${{ needs.deploy-check.outputs.deploy-web }}
    runs-on: ubuntu-latest
    environment: Staging
    steps:
      - run: |
          echo "Staging deployment group"

  deploy-staging-api:
    needs: [ deploy-staging ]
    if: needs.deploy-staging.outputs.deploy-api == 1
    runs-on: ubuntu-latest
    environment: Staging
    steps:
      - run: |
          echo "Staging API deployed"
          echo '${{ toJSON(needs) }}'

  deploy-staging-web:
    needs: [ deploy-staging, deploy-staging-api ]
    if: always() && needs.deploy-staging.outputs.deploy-web == 1
    runs-on: ubuntu-latest
    environment: Staging
    steps:
      - run: |
          echo "Staging WEB deployed"
          echo '${{ toJSON(needs) }}'

  deploy-production:
    needs: [ deploy-check ]
    # workaround for manual deployment on free plan (no approval)
    if: ${{ github.run_attempt > 1 && (needs.deploy-check.outputs.deploy-api == 1 || needs.deploy-check.outputs.deploy-web == 1) }}
    outputs:
      deploy-api: ${{ needs.deploy-check.outputs.deploy-api }}
      deploy-web: ${{ needs.deploy-check.outputs.deploy-web }}
    runs-on: ubuntu-latest
    environment: Production
    steps:
      - run: |
          echo "Production deployment"
          echo '${{ toJSON(needs) }}'

  deploy-production-api:
    if: needs.deploy-production.outputs.deploy-api == 1
    needs: [ deploy-production ]
    runs-on: ubuntu-latest
    environment: Production
    steps:
      - run: |
          echo "Production API deployed"

  deploy-production-web:
    needs: [ deploy-production, deploy-production-api ]
    if: always() && needs.deploy-production.outputs.deploy-web == 1
    runs-on: ubuntu-latest
    environment: Production
    steps:
      - run: |
          echo "Production WEB deployed"
